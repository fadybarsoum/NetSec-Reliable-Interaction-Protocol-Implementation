<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is modified by Seth Nielson for creating P-RFC's
    (Playground-RFC's). -->
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml2rfc.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->




<rfc category="std" docName="p_rfc_confidential" ipr="playgroundSpring201604" number="1">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902, playgroundWinter201501
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

 <front>
   <!-- The abbreviated title is used in the page header - it is only necessary if the 
        full title is longer than 39 characters -->

   <title abbrev="PRFC KISS Lab#3">Playground Request For Comments - KISS Confidential Layer (Lab#3)</title>

   <!-- add 'role="editor"' below for the editors if appropriate -->

   <!-- Another author who claims to be an editor -->

   <author fullname="Fady Barsoum" initials="FB" role="editor"
           surname="Barsoum">
     <organization>JHU Network Security Fall 2016</organization>

     <address>
       <postal>
         <street>JHU 160 Malone Hall/3400 North Charles St.</street>

         <!-- Reorder these if your country does things differently -->

         <city>Baltimore</city>

         <region>MD</region>

         <code>21218</code>

         <country>USA</country>
       </postal>

       <phone>+1 410-497-7384</phone>

       <email>fady.barsoum@jhu.edu</email>

       <!-- uri and facsimile elements may also be added -->
     </address>
   </author>

   <date year="2016" month="November"/>

   <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
        in the current day for you. If only the current year is specified, xml2rfc will fill 
   in the current day and month for you. If the year is not the current one, it is 
   necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
   purpose of calculating the expiry date).  With drafts it is normally sufficient to 
   specify just the year. -->

   <!-- Meta-data Declarations -->

   <area>General</area>

   <workgroup>Playground Experiment Director</workgroup>

   <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.  
   If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

   <keyword>PRFC</keyword>
   <keyword>Playground Request for Comment</keyword>
   <keyword>Confidentiality</keyword>
   <keyword>Encryption</keyword>
   <keyword>KISS</keyword>
   <keyword>XML</keyword>

   <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->

   <abstract>
     <t>This Playground RFC describes the KISS Confidentiality Layer of a PlayGround network. KISS is designed to sit on top of RIP and relies on that layer's guarantees in order to function correctly. KISS's sole purpose is to provide confidentiality to the data contents being communicated between two ends.</t>
   </abstract>
 </front>

 <middle>
   <section title="Introduction">
     <t>KISS is a confidentiality layer designed to sit on top of RIP and relies on that layer's guarantees in order to function correctly. KISS's sole purpose is to provide confidentiality to the data contents being communicated between two ends.</t>
   </section>
   <section title="Requirements Language">
     <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref
target="RFC2119">RFC 2119</xref>.</t>
   </section>
   <section title="Overview">
    <t>KISS is a very simple layer, with the following main components:</t>
    <section title="Initial Handshake">
      <t>KISS relies on the RSA certificates and keys of the RIP connection established underneath it to encrypt a session AES key and Initial Vector (IV). Each KISS obtains this key from RIP, which should already have completed its own handshake/connection, uses the public key of the peer to encrypt a new, randomly-generated AES key and counter, and sends it. Upon receipt of the peer's key and IV, KISS will store and use this info to decrypt future data packets.</t>
      <t>The KISS Handshake message should look like the following:
      <figure><artwork><![CDATA[
        class KissHandshake(MessageDefinition):
            PLAYGROUND_IDENTIFIER = "KissHandShake"
            MESSAGE_VERSION = "1.0"

            BODY = [("key", STRING), # strictly 32 bytes
                    ("IV", STRING) # strictly 16 bytes
                  ]
      ]]></artwork></figure>
      </t>
    </section>
    <section title="AES-CTR Data Encryption">
      <t>Each KISS encrypts its outgoing data using its own-generated AES key. In python, the Crypto library provides encryption and decryption methods. KISS receives data from the layer above, encrypts it, and sends it.</t>
      <t>The KISS Data message should look like the following:
      <figure><artwork><![CDATA[
        class KissData(MessageDefinition):
            PLAYGROUND_IDENTIFIER = "KissData"
            MESSAGE_VERSION = "1.0"

            BODY = [("data", STRING)
                ]
      ]]></artwork></figure>
      </t>
    </section>
    <section title="Expectations from RIP">
    <t>KISS relies on the following guarantees from RIP:
      <list style="symbols">
        <t>Reliability - All messages are delivered and delivered in order</t>
        <t>Authenticity - KISS assumes RIP has verified the authenticity of the peer and depends on the RSA certificates and keys of that layer for the initial handshake</t>
        <t>Integrity - Content of messages is not modified from the sender's KISS</t>
      </list>
    </t>
    </section>
   </section>
   <section title="Finite State Machine">
    There is only really two states: Handshake and Connected. KISS starts in the Handshake state, sends the KISS Handshake message, and waits for the peer's. Once the peer's Handshake is received and processed (ie. KISS is now ready to decrypt the peer's data messages), KISS moves to the Connected state, where it encrypts and sends any outgoing data and decrypts any incoming data.
   </section>
   <section title="Security Considerations">
   <t>The main security concern of KISS is the freshness of the AES key used. It is imperitive that the key generated for each session is not reused (within reason) and not predictable. Additionally, KISS depends on the RSA private keys of each party to be secured. Otherwise, most other security concerns are handled by other layers, especially RIP.</t>
   </section>
 </middle>

 <!--  *****BACK MATTER ***** -->

 <back>
   <!-- References split into informative and normative -->

   <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->

   <references title="Normative References">
     <!--?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
     &RFC2119;
     
     <!--&RFC2360;-->
     
   </references>

   <!-- Change Log


v00 2016-09-26  FB  Drafted the PEIRC Protocol
  -->
 </back>
</rfc>
